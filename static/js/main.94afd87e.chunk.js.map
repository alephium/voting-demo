{"version":3,"sources":["util/util.tsx","images/alephium-logo-gradient-stroke.svg","components/Common.tsx","components/Inputs.tsx","util/voting.tsx","util/types.ts","util/settings.tsx","util/client.tsx","components/Alert.tsx","components/VotersTable.tsx","components/VoterInput.tsx","components/TxStatusSnackBar.tsx","pages/Create.tsx","pages/Vote/Results.tsx","pages/Vote/SubmitVote.tsx","pages/Vote/Vote.tsx","pages/Administrate.tsx","pages/UnlockPage.tsx","components/NetworkBadge.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["catchAndAlert","action","catch","e","undefined","error","detail","alert","clearIntervalIfConfirmed","fetchedStatus","interval","type","clearInterval","isNotEmpty","s","strToHexString","str","Buffer","from","toString","hexStringToStr","Button","styled","div","Container","Input","id","placeholder","value","onChange","StyledInputDiv","StyledInput","input","utxoFee","createContract","nVoters","votersTransfers","i","push","join","createVotingScript","choice","contractRef","tokenId","allocateTokenScript","closeVotingScript","initialContractState","title","adminAddress","voters","console","log","map","voter","Action","NetworkType","loadSettingsOrDefault","settings","window","localStorage","getItem","JSON","parse","loadSettings","network","nodeHost","explorerURL","CONTRACTGAS","Client","baseUrl","walletConnect","provider","api","accounts","fetch","query","a","result","Promise","reject","Error","data","getContractRef","txId","transactions","getTransactionsStatus","txStatus","confirmed","blockflow","getBlockflowBlocksBlockHash","blockHash","block","tx","find","unsigned","contractOutput","generatedOutputs","output","contractAddress","address","tokens","getContractState","addresses","getAddressesAddressGroup","group","contracts","getContractsAddressState","getNVoters","then","fields","length","apiConfig","this","Api","fromAddress","contract","gas","state","issueTokenAmount","request","method","params","script","infos","getInfosChainParams","tResult","networkId","MAINNET","TESTNET","UNKNOWN","Alert","span","color","backgroundColor","ALERT_PROPS","DANGER","WARNING","SUCCESS","VotersTable","removeVoter","admin","style","display","flexDirection","alignItems","marginTop","fontSize","index","marginLeft","onClick","filter","VoterInput","addVoter","useState","setVoter","isAddressValid","target","handleOnChange","TxStatusSnackBar","context","useContext","GlobalContext","status","StyledDiv","href","rel","AddressInput","AddressGroup","Create","setVoters","setAdmin","cache","createTxResult","txResult","setResult","setStatus","typedStatus","setTypedStatus","setTitle","isLoading","setIsLoading","setContractAddress","addressFromString","addressToGroup","pollTxStatus","apiClient","getTxStatus","editCache","currentContractId","useEffect","setInterval","submit","deployContract","to","voteTxResult","administrateTxResult","administrateAction","newVoters","includes","Results","contractTxId","yes","setYes","no","setNo","tmpYes","tmpNo","SubmitVote","setTxStatus","vote","txScript","deployScript","maxWidth","textAlign","lineHeight","Vote","useParams","initTxId","getInitTxId","setContractTxId","isClosed","setIsClosed","setContractRef","load","encodedTitle","content","Administrate","lastAction","setLastAction","allocateTokens","numberVoters","Allocate","close","Close","noop","Header","h1","Text","p","Modal","ReactModal","MultiList","MultiItem","Page","isModalOpen","onUnlock","uri","setState","isOpen","shouldCloseOnEsc","shouldCloseOnOverlayClick","onRequestClose","ariaHideApp","size","includeMargin","NetworkBadge","networkType","Badge","networkTypeToText","DangerLogo","DangerLogoSpan","button","initialContext","setSettings","setApiClient","React","createContext","getStorage","Logo","img","ContentContainer","NavBarContainer","nav","NavBar","NavBarItem","NavLink","RedButton","Address","App","isUnlockOpen","setUnlockOpen","setUri","useReducer","prevCache","edits","setAccounts","handleUnlockWallet","useCallback","WalletConnectClient","init","projectId","relayUrl","metadata","name","description","url","icons","AlephiumProvider","chains","client","on","CLIENT_EVENTS","pairing","proposal","signal","session","deleted","sync","connect","settingsWallet","explorerUrl","onDisconnect","disconnect","stylePressedIn","boxShadow","Provider","position","left","top","src","logo","exact","activeStyle","path","UnlockPage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94afd87e.chunk.js","sourcesContent":["import { TxStatus } from 'alephium-js/dist/api/api-alephium'\nimport { TypedStatus } from './types'\n\n// eslint-disable-next-line\nexport function catchAndAlert(action: Promise<any>) {\n  action.catch((e) => {\n    if (e != undefined && e.error != undefined && e.error.detail != undefined) {\n      alert(e.error.detail)\n    } else {\n      alert(e)\n    }\n  })\n}\n\nexport function clearIntervalIfConfirmed(fetchedStatus: TxStatus, interval: NodeJS.Timeout): boolean {\n  const status = fetchedStatus as TypedStatus\n  if (status.type == 'Confirmed') {\n    clearInterval(interval)\n    return true\n  }\n  return false\n}\n\nexport const isNotEmpty = (s: string): boolean => {\n  return s !== '' ? true : false\n}\n\nexport function strToHexString(str: string) {\n  return Buffer.from(str).toString('hex')\n}\n\nexport function hexStringToStr(str: string) {\n  return Buffer.from(str, 'hex').toString()\n}\n","export default __webpack_public_path__ + \"static/media/alephium-logo-gradient-stroke.be7cb67e.svg\";","import styled from 'styled-components'\r\n\r\nconst Button = styled.div`\r\n  text-decoration: none;\r\n  color: rgba(0, 0, 0, 0.9);\r\n  cursor: pointer;\r\n  padding: 1.2rem 1.6rem;\r\n  font-weight: 700;\r\n  margin: 1rem 0rem;\r\n  border-radius: 12px;\r\n  box-shadow: -6px -6px 12px 0 rgb(255 255 255 / 60%), 6px 6px 12px 0 rgb(0 0 0 / 7%);\r\n  text-align: center;\r\n\r\n  & > * {\r\n    text-decoration: none;\r\n    color: rgba(0, 0, 0, 0.9);\r\n  }\r\n\r\n  &:hover {\r\n  }\r\n\r\n  &:active {\r\n    box-shadow: -6px -6px 12px 0 rgb(255 255 255 / 60%) inset, 6px 6px 12px 0 rgb(0 0 0 / 7%) inset;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: calc(100% - 3.2rem);\r\n  text-decoration: none;\r\n  color: rgba(0, 0, 0, 0.9);\r\n  cursor: pointer;\r\n  padding: 1.2rem 1.6rem;\r\n  font-weight: 700;\r\n  margin: 2rem;\r\n  border-radius: 12px;\r\n  box-shadow: -6px -6px 12px 0 rgb(255 255 255 / 60%), 6px 6px 12px 0 rgb(0 0 0 / 7%);\r\n`\r\n\r\nexport { Button, Container }\r\n","import { ChangeEvent } from 'react'\r\nimport styled from 'styled-components'\r\n\r\ninterface InputProps {\r\n  id: string\r\n  placeholder: string\r\n  value: string\r\n  type?: string\r\n  onChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport const Input = ({ id, placeholder, value, onChange, type }: InputProps) => {\r\n  return (\r\n    <StyledInputDiv>\r\n      <StyledInput\r\n        id={id}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        type={type ? type : 'text'}\r\n        onChange={(e) => onChange(e)}\r\n      ></StyledInput>\r\n    </StyledInputDiv>\r\n  )\r\n}\r\n\r\nconst StyledInputDiv = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-bottom: 5px;\r\n  flex-grow: 1;\r\n\r\n  text-decoration: none;\r\n  color: rgba(0, 0, 0, 0.9);\r\n  cursor: pointer;\r\n  padding: 1.2rem 1.6rem;\r\n  font-weight: 700;\r\n  margin: 1rem 0rem;\r\n  border-radius: 12px;\r\n  box-shadow: 6px 6px 12px 0 rgb(255 255 255 / 60%), -6px -6px 12px 0 rgb(0 0 0 / 7%);\r\n`\r\nconst StyledInput = styled.input`\r\n  font-weight: 600;\r\n  border: none;\r\n  outline: none;\r\n  background-color: transparent;\r\n  transition: all 0.15s ease-out 0s;\r\n  margin-top: auto;\r\n  margin-bottom: auto;\r\n\r\n  &:-webkit-autofill,\r\n  &:-webkit-autofill:hover,\r\n  &:-webkit-autofill:focus,\r\n  &:-webkit-autofill:active {\r\n    transition: background-color 600000s 0s, color 600000s 0s;\r\n  }\r\n\r\n  &:active {\r\n    background-color: transparent;\r\n  }\r\n`\r\n\r\nexport default Input\r\n","import { Val } from 'alephium-js/dist/api/api-alephium'\nimport { ContractRef } from './client'\nimport { strToHexString } from './util'\n\nconst utxoFee = '50000000000000'\nexport function createContract(nVoters: number): string {\n  const votersTransfers: string[] = []\n  for (let i = 0; i < nVoters; i++) {\n    votersTransfers.push(`transferAlph!(admin, voters[${i}], ${utxoFee})`)\n    votersTransfers.push(`transferTokenFromSelf!(voters[${i}], selfTokenId!(), 1)`)\n  }\n  return `\n   TxContract Voting(\n     title: ByteVec,\n     mut yes: U256,\n     mut no: U256,\n     mut isClosed: Bool,\n     mut initialized: Bool,\n     admin: Address,\n     voters: [Address; ${nVoters}]\n   ) {\n     pub payable fn allocateTokens() -> () {\n        assert!(initialized == false)\n        assert!(txCaller!(txCallerSize!() - 1) == admin)\n        ${votersTransfers.join('\\n')}\n        yes = 0\n        no = 0\n        initialized = true\n     }\n\n     pub payable fn vote(choice: Bool, voter: Address) -> () {\n       assert!(initialized == true && isClosed == false)\n       transferAlph!(voter, admin, ${utxoFee})\n       transferTokenToSelf!(voter, selfTokenId!(), 1)\n       if (choice == true) {\n          yes = yes + 1\n       } else {\n          no = no + 1\n       }\n     }\n\n      pub fn close() -> () {\n        assert!(initialized == true && isClosed == false)\n        assert!(txCaller!(txCallerSize!() - 1) == admin)\n        isClosed = true\n      }\n    }`\n}\n\nexport function createVotingScript(choice: boolean, contractRef: ContractRef, nVoters: number): string {\n  return `TxScript VotingScript {\n      pub payable fn main() -> () {\n        let caller = txCaller!(0)\n        let voting = Voting(#${contractRef.tokenId})\n        approveToken!(caller, #${contractRef.tokenId}, 1)\n        approveAlph!(caller, ${utxoFee})\n        voting.vote(${choice}, caller)\n      }\n    }\n    ${createContract(nVoters)}\n    `\n}\n\nexport function allocateTokenScript(contractRef: ContractRef, nVoters: number): string {\n  return `TxScript TokenAllocation {\n    pub payable fn main() -> () {\n      let voting = Voting(#${contractRef.tokenId})\n      let caller = txCaller!(0)\n      approveAlph!(caller, ${utxoFee} * ${nVoters})\n      voting.allocateTokens()\n    }\n  }\n  ${createContract(nVoters)}\n  `\n}\n\nexport function closeVotingScript(contractRef: ContractRef, nVoters: number): string {\n  return `TxScript ClosingScript {\n    pub payable fn main() -> () {\n      let voting = Voting(#${contractRef.tokenId})\n      voting.close()\n    }\n  }\n  ${createContract(nVoters)}\n  `\n}\n\nexport function initialContractState(title: string, adminAddress: string, voters: string[]): Val[] {\n  console.log(voters)\n  return [\n    { type: 'ByteVec', value: `${strToHexString(title)}` },\n    { type: 'U256', value: '0' },\n    { type: 'U256', value: '0' },\n    { type: 'Bool', value: false },\n    { type: 'Bool', value: false },\n    { type: 'Address', value: `${adminAddress}` },\n    { type: 'Array', value: voters.map((voter) => ({ type: 'Address', value: `${voter}` })) }\n  ]\n}\n","import { TxResult } from 'alephium-js/dist/api/api-alephium'\r\n\r\nexport interface Address {\r\n  address: string\r\n  group: number\r\n}\r\n\r\nexport interface TypedStatus {\r\n  type: string\r\n  blockHash?: string\r\n  txIndex?: number\r\n  chainConfirmations?: number\r\n  fromGroupConfirmations?: number\r\n  toGroupConfirmations?: number\r\n}\r\n\r\nexport enum Action {\r\n  Allocate,\r\n  Close\r\n}\r\n\r\nexport interface Cache {\r\n  currentContractId: string\r\n  createTxResult?: TxResult\r\n  voteTxResult?: TxResult\r\n  administrateTxResult?: TxResult\r\n  administrateAction?: Action\r\n}\r\n\r\nexport function emptyCache(): Cache {\r\n  return {\r\n    currentContractId: '',\r\n    createTxResult: undefined,\r\n    voteTxResult: undefined,\r\n    administrateTxResult: undefined,\r\n    administrateAction: undefined\r\n  }\r\n}\r\n\r\nexport enum NetworkType {\r\n  MAINNET,\r\n  TESTNET,\r\n  UNKNOWN,\r\n  UNREACHABLE\r\n}\r\n","export interface Settings {\n  network: string\n  nodeHost: string\n  explorerURL: string\n}\n\nexport function defaultSettings(): Settings {\n  return {\n    network: 'testnet',\n    nodeHost: 'http://127.0.0.1:12973',\n    explorerURL: 'https://testnet.alephium.org'\n  }\n}\n\nexport function loadSettings(): Settings | null {\n  const str = window.localStorage.getItem('voting-demo-settings')\n  if (str) {\n    return JSON.parse(str)\n  } else {\n    return null\n  }\n}\n\nexport function loadSettingsOrDefault(): Settings {\n  const settings = loadSettings()\n  if (!settings) {\n    return defaultSettings()\n  } else {\n    return settings\n  }\n}\n\nexport function saveSettings(settings: Settings) {\n  const str = JSON.stringify(settings)\n  window.localStorage.setItem('voting-demo-settings', str)\n}\n","import WalletConnectClient from '@walletconnect/client'\nimport AlephiumProvider from '@alephium/walletconnect-provider'\n\nimport {\n  Api,\n  ApiConfig,\n  TxResult,\n  HttpResponse,\n  ServiceUnavailable,\n  InternalServerError,\n  NotFound,\n  Unauthorized,\n  BadRequest,\n  TxStatus,\n  Confirmed,\n  ContractState,\n  Val\n} from 'alephium-js/dist/api/api-alephium'\nimport { loadSettingsOrDefault, Settings } from './settings'\nimport { NetworkType } from './types'\n\nexport interface ContractRef {\n  contractAddress: string\n  tokenId: string\n}\n\nexport const CONTRACTGAS = 80000\n\nclass Client {\n  api: Api<unknown>\n  walletConnect: WalletConnectClient\n  provider: AlephiumProvider\n  accounts: string[]\n  settings: Settings\n\n  constructor(baseUrl: string, walletConnect: WalletConnectClient, provider: AlephiumProvider) {\n    const apiConfig: ApiConfig = {\n      baseUrl: baseUrl\n    }\n    this.api = new Api(apiConfig)\n    this.accounts = []\n    this.walletConnect = walletConnect\n    this.provider = provider\n    this.settings = loadSettingsOrDefault()\n  }\n\n  async getActiveAddress(): Promise<string> {\n    return this.accounts[0] || Promise.reject('No active address')\n  }\n\n  fetch = async <T, E extends BadRequest | Unauthorized | NotFound | InternalServerError | ServiceUnavailable>(\n    query: Promise<HttpResponse<T, E>>\n  ): Promise<T> => {\n    const result = await query\n    if (result.error) {\n      return Promise.reject(new Error(result.error.detail))\n    }\n    return result.data\n  }\n\n  async deployContract(\n    fromAddress: string,\n    contract: string,\n    gas: number,\n    state: Val[],\n    issueTokenAmount: string\n  ): Promise<TxResult & { contractAddress: string }> {\n    return this.provider.request({\n      method: 'alephium_signAndSubmitTx',\n      params: {\n        fromAddress,\n        contract,\n        gas,\n        state,\n        issueTokenAmount\n      }\n    })\n  }\n\n  async deployScript(fromAddress: string, script: string, gas: number): Promise<TxResult> {\n    return this.provider.request({\n      method: 'alephium_signAndSubmitTx',\n      params: {\n        fromAddress,\n        script,\n        gas\n      }\n    })\n  }\n\n  async getTxStatus(txId: string): Promise<TxStatus> {\n    return await this.fetch(\n      this.api.transactions.getTransactionsStatus({\n        txId: txId\n      })\n    )\n  }\n\n  getContractRef = async (txId: string): Promise<ContractRef> => {\n    const txStatus = await this.fetch(\n      this.api.transactions.getTransactionsStatus({\n        txId: txId\n      })\n    )\n    if ('blockHash' in txStatus) {\n      const confirmed = txStatus as Confirmed\n      const block = await this.fetch(this.api.blockflow.getBlockflowBlocksBlockHash(confirmed.blockHash))\n      const tx = block.transactions.find((tx) => tx.unsigned.txId === txId)\n      if (tx) {\n        const contractOutput = tx.generatedOutputs.find((output) => !('locktime' in output))\n        if (contractOutput) {\n          console.log(contractOutput, 'output')\n          const contractAddress = contractOutput.address\n          const tokenId = contractOutput.tokens[0].id\n          console.log(contractAddress)\n          if (contractAddress) {\n            return {\n              contractAddress: contractAddress,\n              tokenId: tokenId\n            }\n          } else {\n            return Promise.reject<ContractRef>('The contract address is undefined')\n          }\n        } else {\n          return Promise.reject<ContractRef>('No token found')\n        }\n      } else {\n        return Promise.reject<ContractRef>('No contract found')\n      }\n    } else {\n      return Promise.reject<ContractRef>('Not confirmed yet')\n    }\n  }\n\n  getContractState = async (txId: string): Promise<ContractState> => {\n    const contractRef = await this.getContractRef(txId)\n    const group = await this.fetch(this.api.addresses.getAddressesAddressGroup(contractRef.contractAddress))\n    return this.fetch(this.api.contracts.getContractsAddressState(contractRef.contractAddress, { group: group.group }))\n  }\n\n  getNVoters = async (txId: string): Promise<number> => {\n    return this.getContractState(txId).then((result: ContractState) => {\n      return result.fields.length - 6\n    })\n  }\n\n  async getNetworkType(): Promise<NetworkType> {\n    return this.fetch(this.api.infos.getInfosChainParams()).then((tResult) => {\n      if (tResult.networkId == 0) {\n        return NetworkType.MAINNET\n      } else if (tResult.networkId == 1) {\n        return NetworkType.TESTNET\n      } else {\n        return NetworkType.UNKNOWN\n      }\n    })\n  }\n}\n\nexport default Client\n","import styled from 'styled-components'\r\n\r\nexport interface AlertProps {\r\n  color: string\r\n  backgroundColor: string\r\n}\r\n\r\nexport const Alert = styled.span<AlertProps>`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: ${({ color }) => color};\r\n  margin-bottom: 20px;\r\n  margin-right: 100px;\r\n  background-color: ${({ backgroundColor }) => backgroundColor};\r\n  width: 100%;\r\n  height: 50px;\r\n  border-radius: 12px;\r\n  box-shadow: 6px 6px 12px 0 rgb(255 255 255 / 60%) inset, -6px -6px 12px 0 rgb(0 0 0 / 7%) inset;\r\n`\r\n\r\nexport const ALERT_PROPS = {\r\n  DANGER: {\r\n    color: '#721c24',\r\n    backgroundColor: '#f8d7da'\r\n  },\r\n  WARNING: {\r\n    color: '#7b773e',\r\n    backgroundColor: '#fff6ad'\r\n  },\r\n  SUCCESS: {\r\n    color: '#1e3d1e',\r\n    backgroundColor: 'lightGreen'\r\n  }\r\n}\r\n\r\nexport default { Alert, ALERT_PROPS }\r\n","import { Address } from '../util/types'\r\nimport { Alert, ALERT_PROPS } from './Alert'\r\nimport { Button } from './Common'\r\n\r\ninterface VotersTableProps {\r\n  voters: Address[]\r\n  removeVoter: (voter: string) => void\r\n  admin?: Address\r\n}\r\nexport const VotersTable = ({ voters, removeVoter, admin }: VotersTableProps) => {\r\n  return voters.length > 0 ? (\r\n    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: '1rem' }}>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>#</th>\r\n            <th>Address</th>\r\n            <th>Group</th>\r\n            <th></th>\r\n          </tr>\r\n        </thead>\r\n        <tbody style={{ fontSize: '14px' }}>\r\n          {voters.map((voter, index) => (\r\n            <tr key={index}>\r\n              <td>{index + 1}</td>\r\n              <td>{voter.address}</td>\r\n              <td>\r\n                <span\r\n                  style={{ color: admin === undefined || (admin && voter.group === admin.group) ? 'black' : 'red' }}\r\n                >\r\n                  {voter.group}\r\n                </span>\r\n              </td>\r\n              <td>\r\n                {' '}\r\n                <Button\r\n                  style={{\r\n                    marginLeft: '10px',\r\n                    fontSize: '10px'\r\n                  }}\r\n                  onClick={() => removeVoter(voter.address)}\r\n                >\r\n                  {'\\u274C'}\r\n                </Button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      {admin && voters.filter((voter) => voter.group !== admin.group).length > 0 ? (\r\n        <div>\r\n          <Alert color={ALERT_PROPS.DANGER.color} backgroundColor={ALERT_PROPS.DANGER.backgroundColor}>\r\n            Voters addresses should be in the administrator address Group {admin.group}\r\n          </Alert>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  ) : null\r\n}\r\n\r\nexport default VotersTable\r\n","import { ChangeEvent, useState } from 'react'\r\nimport { isNotEmpty } from '../util/util'\r\nimport { Button } from './Common'\r\nimport { Input } from './Inputs'\r\n\r\ninterface VoterInputProps {\r\n  addVoter: (voter: string) => void\r\n}\r\n\r\nexport const VoterInput = ({ addVoter }: VoterInputProps) => {\r\n  const [voter, setVoter] = useState('')\r\n  const handleOnChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setVoter(e.target.value)\r\n  }\r\n\r\n  const isAddressValid = isNotEmpty\r\n\r\n  const handleOnClick = () => {\r\n    if (isAddressValid(voter)) {\r\n      addVoter(voter)\r\n      setVoter('')\r\n    } else {\r\n      alert('Please enter a valid address')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div style={{ display: 'flex', alignItems: 'center' }}>\r\n      <Input\r\n        id=\"voterInput\"\r\n        placeholder=\"Please enter a voter address\"\r\n        onChange={(e) => handleOnChange(e)}\r\n        value={voter}\r\n      />\r\n      <Button onClick={() => handleOnClick()} style={{ marginLeft: '1rem' }}>\r\n        +\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VoterInput\r\n","import { TxStatus } from 'alephium-js/dist/api/api-alephium'\r\nimport { useContext } from 'react'\r\nimport styled from 'styled-components'\r\nimport { GlobalContext } from '../App'\r\nimport { TypedStatus } from '../util/types'\r\nimport { Alert, ALERT_PROPS } from './Alert'\r\ninterface TxStatusSnackBarProps {\r\n  txStatus: TxStatus\r\n  txId: string\r\n}\r\n\r\nexport const TxStatusSnackBar = ({ txStatus, txId }: TxStatusSnackBarProps) => {\r\n  const context = useContext(GlobalContext)\r\n  const status = txStatus as TypedStatus\r\n  const getMessage = () => {\r\n    if (!(txStatus && txId)) {\r\n      return null\r\n    } else if (status.type === 'Confirmed') {\r\n      return (\r\n        <StyledDiv>\r\n          <Alert color={ALERT_PROPS.SUCCESS.color} backgroundColor={ALERT_PROPS.SUCCESS.backgroundColor}>\r\n            <a\r\n              href={`${context.settings.explorerURL}/#/transactions/${txId}`}\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Transaction\r\n            </a>\r\n            &nbsp; Confirmed!\r\n          </Alert>\r\n        </StyledDiv>\r\n      )\r\n    } else if (status.type === 'MemPooled') {\r\n      return (\r\n        <StyledDiv>\r\n          <Alert color={ALERT_PROPS.WARNING.color} backgroundColor={ALERT_PROPS.WARNING.backgroundColor}>\r\n            Pending&nbsp;\r\n            <a\r\n              href={`${context.settings.explorerURL}/#/transactions/${txId}`}\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              transaction.\r\n            </a>\r\n            &nbsp; Please wait..\r\n          </Alert>\r\n        </StyledDiv>\r\n      )\r\n    } else {\r\n      return (\r\n        <StyledDiv>\r\n          <Alert color={ALERT_PROPS.DANGER.color} backgroundColor={ALERT_PROPS.DANGER.backgroundColor}>\r\n            Transaction not found\r\n          </Alert>\r\n        </StyledDiv>\r\n      )\r\n    }\r\n  }\r\n  return getMessage()\r\n}\r\n\r\nconst StyledDiv = styled.div`\r\n  margin-top: 50px;\r\n`\r\n\r\nexport default TxStatusSnackBar\r\n","import { useState } from 'react'\nimport { Container, Button } from '../components/Common'\nimport { Input } from '../components/Inputs'\nimport { useContext } from 'react'\nimport styled from 'styled-components'\nimport { GlobalContext } from '../App'\nimport { createContract, initialContractState } from '../util/voting'\nimport { CONTRACTGAS } from '../util/client'\nimport { useEffect } from 'react'\nimport { TxResult, TxStatus } from 'alephium-js/dist/api/api-alephium'\nimport { addressToGroup } from 'alephium-js/dist/lib/address'\nimport { NavLink } from 'react-router-dom'\nimport { catchAndAlert, clearIntervalIfConfirmed } from '../util/util'\nimport { Address, emptyCache, TypedStatus } from '../util/types'\nimport VotersTable from '../components/VotersTable'\nimport VoterInput from '../components/VoterInput'\nimport { TxStatusSnackBar } from '../components/TxStatusSnackBar'\nconst totalNumberOfGroups = 4\n\nconst AddressInput = styled.div`\n  display: flex;\n`\n\nconst AddressGroup = styled.div`\n  color: rgba(0, 0, 0, 0.9);\n  font-weight: 700;\n  margin: 1rem 0rem 1rem 0rem;\n  border-radius: 12px;\n  width: 3.7rem;\n  height: 3.2rem;\n  text-align: center;\n  line-height: 3.2rem;\n`\n\nexport const Create = () => {\n  const context = useContext(GlobalContext)\n  const [voters, setVoters] = useState<Address[]>([])\n  const [admin, setAdmin] = useState<Address | undefined>(undefined)\n  const [txResult, setResult] = useState<TxResult | undefined>(context.cache.createTxResult)\n  const [txStatus, setStatus] = useState<TxStatus | undefined>(undefined)\n  const [typedStatus, setTypedStatus] = useState<TypedStatus | undefined>(undefined)\n  const [title, setTitle] = useState<string>('')\n  const [isLoading, setIsLoading] = useState<boolean>(false)\n  const [contractAddress, setContractAddress] = useState('')\n\n  function addressFromString(address: string): Address {\n    const group = addressToGroup(address, totalNumberOfGroups)\n    return { address, group }\n  }\n\n  const updateAdmin = (address: string) => {\n    if (address != '') {\n      setAdmin(addressFromString(address))\n    } else {\n      setAdmin(undefined)\n    }\n  }\n\n  const addVoter = (voter: string) => {\n    if (!voters.map((voter) => voter.address).includes(voter)) {\n      setVoters([...voters, addressFromString(voter)])\n    }\n  }\n\n  const removeVoter = (voter: string) => {\n    const newVoters = voters.filter((address) => voter != address.address)\n    setVoters(newVoters)\n  }\n\n  const pollTxStatus = (interval: NodeJS.Timeout, txResult: TxResult) => {\n    context.apiClient?.getTxStatus(txResult?.txId).then((fetchedStatus) => {\n      setStatus(fetchedStatus)\n      const status = fetchedStatus as TypedStatus\n      setTypedStatus(status)\n      if (clearIntervalIfConfirmed(fetchedStatus, interval)) {\n        context.editCache({ currentContractId: txResult.txId })\n      }\n    })\n  }\n\n  useEffect(() => {\n    if (txResult) {\n      context.editCache({\n        createTxResult: txResult\n      })\n      const interval = setInterval(() => {\n        pollTxStatus(interval, txResult)\n      }, 1000)\n      pollTxStatus(interval, txResult)\n      return () => clearInterval(interval)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [txResult])\n\n  const clear = () => {\n    context.editCache(emptyCache())\n    setVoters([])\n    setAdmin(undefined)\n    setTitle('')\n    setResult(undefined)\n    setStatus(undefined)\n    setTypedStatus(undefined)\n  }\n\n  const submit = async () => {\n    if (context.apiClient) {\n      if (title == '') {\n        return Promise.reject('Please provide a title')\n      } else if (admin == undefined) {\n        return Promise.reject('Please Provide an administrator address')\n      } else {\n        setIsLoading(true)\n        const result = await context.apiClient.deployContract(\n          context.accounts[0],\n          createContract(voters.length),\n          CONTRACTGAS,\n          initialContractState(\n            title,\n            admin?.address,\n            voters.map((voter) => voter.address)\n          ),\n          voters.length.toString()\n        )\n        if (result) {\n          setContractAddress(result.contractAddress)\n          setResult(result)\n        }\n        setIsLoading(false)\n      }\n    }\n  }\n\n  return (\n    <>\n      {txStatus && txResult?.txId && <TxStatusSnackBar txStatus={txStatus} txId={txResult.txId} />}\n      {txResult?.txId && typedStatus && typedStatus.type == 'Confirmed' && (\n        <>\n          <Button>\n            <NavLink to={`/administrate/${txResult.txId}`}>Allocate voting tokens</NavLink>\n          </Button>\n          <Button onClick={clear}>Create another poll</Button>\n        </>\n      )}\n      {!txResult && (\n        <Container>\n          <Input\n            id=\"voting-title\"\n            placeholder=\"Subject to vote on\"\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n          />\n          <AddressInput>\n            <Input\n              id=\"admin-address\"\n              placeholder=\"The administrator address\"\n              value={admin != undefined ? admin.address : ''}\n              onChange={(e) => updateAdmin(e.target.value)}\n            />\n            <AddressGroup>{admin !== undefined && admin.address !== '' && 'G' + admin.group}</AddressGroup>\n          </AddressInput>\n          <VotersTable voters={voters} removeVoter={removeVoter} admin={admin} />\n          <VoterInput addVoter={addVoter} />\n          <Button onClick={() => catchAndAlert(submit())}>Create</Button>\n          {isLoading && <div>Waiting for wallet response...</div>}\n        </Container>\n      )}\n    </>\n  )\n}\n\nexport default Create\n","import { ValByteVec, ValU256 } from 'alephium-js/dist/api/api-alephium'\r\nimport { useContext, useState } from 'react'\r\nimport { GlobalContext } from '../../App'\r\nimport { Container } from '../../components/Common'\r\nimport { hexStringToStr } from '../../util/util'\r\n\r\ninterface ResultsProps {\r\n  contractTxId: string\r\n}\r\n\r\nconst Results = ({ contractTxId }: ResultsProps) => {\r\n  const context = useContext(GlobalContext)\r\n  const [title, setTitle] = useState('')\r\n  const [yes, setYes] = useState('')\r\n  const [no, setNo] = useState('')\r\n\r\n  if (context.apiClient) {\r\n    context.apiClient.getContractState(contractTxId).then((state) => {\r\n      const title = hexStringToStr((state.fields[0] as ValByteVec).value)\r\n      const tmpYes = state.fields[1] as ValU256\r\n      const tmpNo = state.fields[2] as ValU256\r\n      setYes(tmpYes.value)\r\n      setNo(tmpNo.value)\r\n      setTitle(title)\r\n    })\r\n  }\r\n  return (\r\n    <Container>\r\n      <p>The vote is already closed, here are the results:</p>\r\n      <p>{title}</p>\r\n      <p>Yes: {yes}</p>\r\n      <p>No: {no}</p>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Results\r\n","import { TxStatus, TxResult } from 'alephium-js/dist/api/api-alephium'\r\nimport { useContext, useState, useEffect } from 'react'\r\nimport { GlobalContext } from '../../App'\r\nimport { Container, Button } from '../../components/Common'\r\nimport TxStatusSnackBar from '../../components/TxStatusSnackBar'\r\nimport { ContractRef, CONTRACTGAS } from '../../util/client'\r\nimport { TypedStatus } from '../../util/types'\r\nimport { clearIntervalIfConfirmed, catchAndAlert } from '../../util/util'\r\nimport { createVotingScript } from '../../util/voting'\r\n\r\ninterface SubmitVoteProps {\r\n  contractRef?: ContractRef\r\n  contractTxId?: string\r\n  title: string\r\n}\r\n\r\nconst SubmitVote = ({ contractRef, contractTxId, title }: SubmitVoteProps) => {\r\n  const context = useContext(GlobalContext)\r\n  const [txStatus, setTxStatus] = useState<TxStatus | undefined>(undefined)\r\n  const [txResult, setResult] = useState<TxResult | undefined>(context.cache.voteTxResult)\r\n  const [typedStatus, setTypedStatus] = useState<TypedStatus | undefined>(undefined)\r\n\r\n  const pollTxStatus = (interval: NodeJS.Timeout, txResult: TxResult) => {\r\n    context.apiClient?.getTxStatus(txResult?.txId).then((fetchedStatus) => {\r\n      setTxStatus(fetchedStatus)\r\n      setTypedStatus(fetchedStatus as TypedStatus)\r\n      clearIntervalIfConfirmed(fetchedStatus, interval)\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (txResult) {\r\n      context.editCache({ voteTxResult: txResult })\r\n      const interval = setInterval(() => {\r\n        pollTxStatus(interval, txResult)\r\n      }, 1000)\r\n      pollTxStatus(interval, txResult)\r\n      return () => clearInterval(interval)\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [txResult])\r\n\r\n  const vote = async (choice: boolean) => {\r\n    if (contractRef && context.apiClient && contractTxId) {\r\n      const nVoters = await context.apiClient.getNVoters(contractTxId)\r\n      const txScript = createVotingScript(choice, contractRef, nVoters)\r\n      catchAndAlert(context.apiClient.deployScript(context.accounts[0], txScript, CONTRACTGAS).then(setResult))\r\n    }\r\n  }\r\n  return (\r\n    <div>\r\n      {txStatus && txResult?.txId && <TxStatusSnackBar txStatus={txStatus} txId={txResult.txId} />}\r\n      {txResult?.txId && typedStatus && typedStatus.type == 'Confirmed' && (\r\n        <Container style={{ maxWidth: '400px', textAlign: 'center', lineHeight: '1.5' }}>\r\n          <p>Thanks for voting!</p>\r\n          <p>Reload the contract when the administrator has closed the vote to see the results.</p>\r\n        </Container>\r\n      )}\r\n      {!txResult && (\r\n        <Container>\r\n          <p>{title}</p>\r\n          <Button onClick={() => vote(true)}>Yes</Button>\r\n          <Button onClick={() => vote(false)}>No</Button>\r\n        </Container>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\nexport default SubmitVote\r\n","import { useContext, useState } from 'react'\nimport { GlobalContext } from '../../App'\nimport { Container, Button } from '../../components/Common'\nimport { Input } from '../../components/Inputs'\nimport { ContractRef } from '../../util/client'\nimport { useParams } from 'react-router-dom'\nimport { ValBool, ValByteVec } from 'alephium-js/dist/api/api-alephium'\nimport { catchAndAlert, hexStringToStr } from '../../util/util'\nimport Results from './Results'\nimport SubmitVote from './SubmitVote'\n\ntype Params = {\n  txId?: string\n}\n\nconst Vote = () => {\n  const context = useContext(GlobalContext)\n  const { txId } = useParams<Params>()\n  const getInitTxId = () => {\n    let initTxId = txId ? txId : ''\n    if (context.cache.currentContractId) {\n      initTxId = context.cache.currentContractId\n    }\n    return initTxId\n  }\n\n  const [contractTxId, setContractTxId] = useState<string>(getInitTxId())\n  const [isClosed, setIsClosed] = useState<boolean | undefined>(undefined)\n  const [contractRef, setContractRef] = useState<ContractRef | undefined>(undefined)\n  const [title, setTitle] = useState<string>('')\n\n  const load = async () => {\n    if (context.apiClient) {\n      context.editCache({ currentContractId: contractTxId })\n      const contractRef = await context.apiClient.getContractRef(contractTxId)\n      if (contractRef) {\n        setContractRef(contractRef)\n        context.apiClient.getContractState(contractTxId).then((state) => {\n          const encodedTitle = (state.fields[0] as ValByteVec).value\n          setTitle(hexStringToStr(encodedTitle))\n          const isClosed = (state.fields[3] as ValBool).value\n          setIsClosed(isClosed)\n        })\n      }\n    }\n  }\n\n  let content = (\n    <Container>\n      <Input\n        id=\"txId\"\n        placeholder=\"The contract transaction ID\"\n        value={contractTxId}\n        onChange={(e) => setContractTxId(e.target.value)}\n      />\n      <Button onClick={() => catchAndAlert(load())}>Load Contract</Button>\n    </Container>\n  )\n\n  if (isClosed === true) {\n    if (context.apiClient) {\n      content = <Results contractTxId={contractTxId} />\n    }\n  } else if (isClosed === false) {\n    content = <SubmitVote contractRef={contractRef} contractTxId={context.cache.currentContractId} title={title} />\n  }\n  return content\n}\n\nexport default Vote\n","import { TxResult, TxStatus } from 'alephium-js/dist/api/api-alephium'\r\nimport { useContext, useEffect, useState } from 'react'\r\nimport { NavLink, useParams } from 'react-router-dom'\r\nimport { GlobalContext } from '../App'\r\nimport { Button, Container } from '../components/Common'\r\nimport { Input } from '../components/Inputs'\r\nimport { TxStatusSnackBar } from '../components/TxStatusSnackBar'\r\nimport { CONTRACTGAS } from '../util/client'\r\nimport { allocateTokenScript, closeVotingScript } from '../util/voting'\r\nimport { catchAndAlert, clearIntervalIfConfirmed } from '../util/util'\r\nimport { Action, TypedStatus } from '../util/types'\r\n\r\ntype Params = {\r\n  txId?: string\r\n}\r\n\r\nconst Administrate = () => {\r\n  const { txId } = useParams<Params>()\r\n  const context = useContext(GlobalContext)\r\n  const getInitTxId = () => {\r\n    let initTxId = txId ? txId : ''\r\n    if (context.cache.currentContractId) {\r\n      initTxId = context.cache.currentContractId\r\n    }\r\n    return initTxId\r\n  }\r\n  const [contractTxId, setContractTxId] = useState<string>(getInitTxId())\r\n  const [txResult, setResult] = useState<TxResult | undefined>(context.cache.administrateTxResult)\r\n  const [txStatus, setTxStatus] = useState<TxStatus | undefined>(undefined)\r\n  const [typedStatus, setTypedStatus] = useState<TypedStatus | undefined>(undefined)\r\n  const [lastAction, setLastAction] = useState<Action | undefined>(context.cache.administrateAction)\r\n\r\n  const pollTxStatus = (interval: NodeJS.Timeout, txResult: TxResult) => {\r\n    context.apiClient?.getTxStatus(txResult.txId).then((fetchedStatus) => {\r\n      setTxStatus(fetchedStatus)\r\n      const status = fetchedStatus as TypedStatus\r\n      setTypedStatus(status)\r\n      clearIntervalIfConfirmed(fetchedStatus, interval)\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (txResult) {\r\n      context.editCache({ administrateTxResult: txResult })\r\n      const interval = setInterval(() => {\r\n        pollTxStatus(interval, txResult)\r\n      }, 1000)\r\n      pollTxStatus(interval, txResult)\r\n      return () => clearInterval(interval)\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [txResult])\r\n\r\n  const allocateTokens = async () => {\r\n    if (context.apiClient) {\r\n      const contractRef = await context.apiClient.getContractRef(contractTxId).catch((e) => console.log(e))\r\n      if (contractRef) {\r\n        const numberVoters = await context.apiClient.getNVoters(contractTxId)\r\n        await context.apiClient\r\n          .deployScript(context.accounts[0], allocateTokenScript(contractRef, numberVoters), CONTRACTGAS)\r\n          .then(setResult)\r\n        setLastAction(Action.Allocate)\r\n        context.editCache({ currentContractId: contractTxId, administrateAction: Action.Allocate })\r\n      }\r\n    }\r\n  }\r\n  const close = async () => {\r\n    if (context.apiClient) {\r\n      const contractRef = await context.apiClient.getContractRef(contractTxId).catch((e) => console.log(e))\r\n      if (contractRef) {\r\n        const numberVoters = await context.apiClient.getNVoters(contractTxId)\r\n        await context.apiClient\r\n          .deployScript(context.accounts[0], closeVotingScript(contractRef, numberVoters), CONTRACTGAS)\r\n          .then(setResult)\r\n        setLastAction(Action.Close)\r\n        context.editCache({ currentContractId: contractTxId, administrateAction: Action.Close })\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {txStatus && txResult?.txId && <TxStatusSnackBar txStatus={txStatus} txId={txResult.txId} />}\r\n      {txResult?.txId && typedStatus && typedStatus.type === 'Confirmed' && lastAction === Action.Allocate && (\r\n        <Container>\r\n          <div style={{ flexDirection: 'row' }}>\r\n            Share this<NavLink to={`/vote/${contractTxId}`}> link </NavLink> to the voters.\r\n          </div>\r\n        </Container>\r\n      )}\r\n      {(!txResult || (typedStatus && typedStatus.type === 'Confirmed')) && (\r\n        <Container>\r\n          <Input\r\n            id=\"tx-id\"\r\n            placeholder=\"The contract transaction ID\"\r\n            value={contractTxId}\r\n            onChange={(e) => setContractTxId(e.target.value)}\r\n          />\r\n          <Button onClick={() => catchAndAlert(allocateTokens())}>Allocate Tokens</Button>\r\n          <Button onClick={() => catchAndAlert(close())}>Close voting</Button>\r\n        </Container>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Administrate\r\n","import { useEffect, useState } from 'react'\nimport ReactModal from 'react-modal'\nimport styled from 'styled-components'\nimport { QRCodeSVG } from 'qrcode.react'\n\ninterface Props {\n  isModalOpen: boolean\n  onUnlock: (a: 'mainnet' | 'testnet' | 'localhost') => void\n  uri?: string\n}\n\nfunction noop() {\n  // do nothing.\n}\n\ntype State = 'network select' | 'pairing'\n\nconst Page = ({ isModalOpen, onUnlock, uri }: Props) => {\n  const [state, setState] = useState<State>('network select')\n  useEffect(() => {\n    if (uri !== undefined) {\n      setState('pairing')\n    } else {\n      setState('network select')\n    }\n  }, [uri])\n\n  return (\n    <Modal\n      isOpen={isModalOpen}\n      shouldCloseOnEsc={true}\n      shouldCloseOnOverlayClick={true}\n      onRequestClose={noop}\n      ariaHideApp={false}\n    >\n      <Container>\n        <Header>This dApp requires an action</Header>\n        {state == 'network select' && (\n          <>\n            <Text>Select the network which your wallet is using</Text>\n            <MultiList>\n              <MultiItem onClick={() => onUnlock('mainnet')}>Mainnet</MultiItem>\n              <MultiItem onClick={() => onUnlock('testnet')}>Testnet</MultiItem>\n              <MultiItem onClick={() => onUnlock('localhost')}>Localhost</MultiItem>\n            </MultiList>\n          </>\n        )}\n        {state == 'pairing' && (\n          <>\n            <QRCodeSVG value={uri || ''} size={256} includeMargin={true} />\n            <Input value={uri} />\n          </>\n        )}\n      </Container>\n    </Modal>\n  )\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  margin-top: 2rem;\n\n  background-image: linear-gradient(-140deg, rgb(255, 93, 81), 67%, rgb(18, 0, 218));\n  letter-spacing: 0.02rem;\n  border-radius: 12px;\n  padding: 4rem;\n  box-shadow: 6px 0px 12px 0 rgba(255, 93, 81, 0.6), 0px 6px 12px 0 rgba(18, 0, 218, 0.3);\n`\n\nconst Header = styled.h1`\n  color: rgba(255, 255, 255, 0.84);\n  font-weight: 900;\n  margin-bottom: 2rem;\n`\n\nconst Text = styled.p`\n  color: rgba(255, 255, 255, 0.67);\n  font-weight: 700;\n  padding: 1.5rem 2rem;\n  margin: 1rem;\n  border-radius: 12px;\n  box-shadow: -6px -6px 12px 0 rgba(255, 255, 255, 0.1), 6px 6px 12px 0 rgba(0, 0, 0, 0.1);\n`\n\nconst Input = styled.input`\n  color: rgba(255, 255, 255, 0.67);\n  font-weight: 700;\n  padding: 1.5rem 2rem;\n  margin: 1rem;\n  background: transparent;\n  border: none;\n  border-radius: 12px;\n  box-shadow: -6px -6px 12px 0 rgba(255, 255, 255, 0.1) inset, 6px 6px 12px 0 rgba(0, 0, 0, 0.1) inset;\n  width: 100%;\n`\n\nconst Modal = styled(ReactModal)`\n  width: 600px;\n  margin: auto;\n  font-family: Roboto, 'Droid Sans', sans-serif;\n`\n\nconst MultiList = styled.div`\n  display: flex;\n  flex-direction: row;\n`\n\nconst MultiItem = styled.div`\n  color: rgba(255, 255, 255, 0.7);\n  cursor: pointer;\n  padding: 1.2rem 1.6rem;\n  font-weight: 700;\n  margin: 1rem;\n  border-radius: 12px;\n  box-shadow: 6px 6px 12px 0 rgba(255, 255, 255, 0.1) inset, -6px -6px 12px 0 rgba(0, 0, 0, 0.1) inset;\n`\n\nexport default Page\n","import styled from 'styled-components'\r\nimport { NetworkType } from '../util/types'\r\n\r\ninterface NetworkBadgeProps {\r\n  networkType: NetworkType\r\n}\r\n\r\nexport const NetworkBadge = ({ networkType }: NetworkBadgeProps) => {\r\n  const networkTypeToText = (networkType: NetworkType) => {\r\n    if (networkType === NetworkType.MAINNET) {\r\n      return 'Mainnet'\r\n    } else if (networkType === NetworkType.TESTNET) {\r\n      return 'Testnet'\r\n    } else if (networkType === NetworkType.UNKNOWN) {\r\n      return 'Unknown network'\r\n    } else {\r\n      return 'Unreachable node'\r\n    }\r\n  }\r\n  return (\r\n    <div style={{ display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\r\n      <Badge>{networkTypeToText(networkType)}</Badge>\r\n      {networkType !== NetworkType.TESTNET && <DangerLogo />}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst DangerLogo = () => {\r\n  return <DangerLogoSpan>&#9888;</DangerLogoSpan>\r\n}\r\n\r\nconst DangerLogoSpan = styled.span`\r\n  color: red;\r\n  font-size: 25px;\r\n  margin-left: 10px;\r\n`\r\n\r\nconst Badge = styled.button`\r\n  background-color: white;\r\n  border-radius: 15px;\r\n  border-width: 1px;\r\n  border-style: solid;\r\n  border-color: #e7e7e7;\r\n  padding-left: 10px;\r\n  padding-right: 10px;\r\n  margin-left: 20px;\r\n  padding-top: 0px;\r\n  height: 30px;\r\n`\r\n","import WalletConnectClient, { CLIENT_EVENTS } from '@walletconnect/client'\nimport AlephiumProvider from '@alephium/walletconnect-provider'\nimport { PairingTypes } from '@walletconnect/types'\n\nimport React, { Reducer, useCallback, useReducer, useState } from 'react'\nimport logo from './images/alephium-logo-gradient-stroke.svg'\nimport styled from 'styled-components'\nimport { Switch, Route, NavLink } from 'react-router-dom'\nimport Create from './pages/Create'\nimport Vote from './pages/Vote/Vote'\nimport Administrate from './pages/Administrate'\nimport UnlockPage from './pages/UnlockPage'\nimport { getStorage } from 'alephium-js'\nimport Client from './util/client'\nimport { loadSettingsOrDefault, Settings } from './util/settings'\nimport { emptyCache, Cache, NetworkType } from './util/types'\nimport { NetworkBadge } from './components/NetworkBadge'\n\nexport interface Context {\n  settings: Settings\n  setSettings: (s: Settings) => void\n  apiClient?: Client\n  setApiClient: (w: Client | undefined) => void\n  cache: Cache\n  editCache: React.Dispatch<Partial<Cache>>\n  accounts: string[]\n}\n\nconst initialContext: Context = {\n  settings: loadSettingsOrDefault(),\n  setSettings: () => null,\n  apiClient: undefined,\n  setApiClient: () => null,\n  cache: emptyCache(),\n  editCache: () => null,\n  accounts: []\n}\n\nexport const GlobalContext = React.createContext<Context>(initialContext)\nexport const Storage = getStorage()\n\nfunction noop() {\n  /* do nothing. */\n}\n\nconst App = () => {\n  const [isUnlockOpen, setUnlockOpen] = useState(true)\n  const [uri, setUri] = useState<string | undefined>(undefined)\n  const [settings, setSettings] = useState<Settings>(loadSettingsOrDefault())\n  const [apiClient, setApiClient] = useState<Client | undefined>(undefined)\n  const editCacheReducer: Reducer<Cache, Partial<Cache>> = (prevCache: Cache, edits: Partial<Cache>) => ({\n    ...prevCache,\n    ...edits\n  })\n  const [cache, editCache] = useReducer(editCacheReducer, emptyCache())\n  const [networkType] = useState<NetworkType | undefined>(undefined)\n  const [accounts, setAccounts] = useState<string[]>([])\n\n  const handleUnlockWallet = useCallback(async (network) => {\n    const walletConnect = await WalletConnectClient.init({\n      // TODO: configurable project Id\n      projectId: '6e2562e43678dd68a9070a62b6d52207',\n      relayUrl: 'wss://relay.walletconnect.com',\n      metadata: {\n        name: 'Voting demo',\n        description: 'A demonstration of voting on Alephium',\n        url: 'https://walletconnect.com/',\n        icons: ['https://walletconnect.com/walletconnect-logo.png']\n      }\n    })\n\n    const provider = new AlephiumProvider({\n      chains: [network],\n      client: walletConnect\n    })\n\n    walletConnect.on(CLIENT_EVENTS.pairing.proposal, async (proposal: PairingTypes.Proposal) => {\n      const { uri } = proposal.signal.params\n      setUri(uri)\n    })\n\n    walletConnect.on(CLIENT_EVENTS.session.deleted, noop)\n    walletConnect.on(CLIENT_EVENTS.session.sync, () => {\n      setUnlockOpen(false)\n      setUri(undefined)\n    })\n\n    provider.on('accountsChanged', (accounts: string[]) => {\n      setUnlockOpen(false)\n      setUri(undefined)\n      setAccounts(accounts)\n    })\n\n    await provider.connect()\n\n    const settingsWallet: any = await provider.request({\n      method: 'alephium_getServices',\n      params: {}\n    })\n\n    setSettings({\n      network,\n      nodeHost: settingsWallet.nodeHost,\n      explorerURL: settingsWallet.explorerUrl\n    })\n\n    setApiClient(new Client(settings.nodeHost, walletConnect, provider))\n    setUnlockOpen(false)\n  }, [])\n\n  const onDisconnect = useCallback(async () => {\n    await apiClient?.provider.disconnect()\n    setAccounts([])\n    setUnlockOpen(true)\n  }, [apiClient])\n\n  const stylePressedIn = {\n    boxShadow: '-6px -6px 12px 0 rgb(255 255 255 / 60%) inset, 6px 6px 12px 0 rgb(0 0 0 / 7%) inset'\n  }\n\n  return (\n    <GlobalContext.Provider\n      value={{\n        settings,\n        setSettings,\n        apiClient,\n        setApiClient,\n        cache: cache,\n        editCache,\n        accounts\n      }}\n    >\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n        <div style={{ position: 'fixed', left: '1rem', top: '1rem' }}>\n          <Logo src={logo}></Logo>\n          {networkType !== undefined && <NetworkBadge networkType={networkType} />}\n        </div>\n        <ContentContainer>\n          <NavBarContainer>\n            <NavBar>\n              <NavBarItem exact to=\"/\" activeStyle={stylePressedIn}>\n                Create\n              </NavBarItem>\n              <NavBarItem to=\"/administrate\" activeStyle={stylePressedIn}>\n                Administrate\n              </NavBarItem>\n              <NavBarItem to=\"/vote\" activeStyle={stylePressedIn}>\n                Vote\n              </NavBarItem>\n              <RedButton onClick={onDisconnect}>⏻</RedButton>\n            </NavBar>\n          </NavBarContainer>\n          <Address>{accounts[0]}</Address>\n          <Switch>\n            <Route exact path=\"/\">\n              <Create />\n            </Route>\n            <Route exact path=\"/vote/:txId\">\n              <Vote />\n            </Route>\n            <Route path=\"/vote\">\n              <Vote />\n            </Route>\n            <Route exact path=\"/administrate/:txId\">\n              <Administrate />\n            </Route>\n            <Route path=\"/administrate\">\n              <Administrate />\n            </Route>\n          </Switch>\n          <UnlockPage isModalOpen={isUnlockOpen} onUnlock={handleUnlockWallet} uri={uri} />\n        </ContentContainer>\n      </div>\n    </GlobalContext.Provider>\n  )\n}\n\n/* Styles */\nconst Logo = styled.img`\n  width: auto;\n  height: 50px;\n`\n\nconst ContentContainer = styled.div`\n  padding-top: 20px;\n  padding-bottom: 20px;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  display: flex;\n  font-family: Arial;\n  width: 39rem;\n`\n\nconst NavBarContainer = styled.nav`\n  justify-content: space-between;\n  display: flex;\n  flex-direction: row;\n  width: auto;\n  align-items: center;\n  margin-top: 3.5rem;\n  margin-bottom: 0rem;\n`\n\nconst NavBar = styled.nav`\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  display: flex;\n  color: rgba(0, 0, 0, 0.9);\n  cursor: pointer;\n  font-weight: 700;\n  width: 100%;\n  border-radius: 12px;\n  box-shadow: 6px 6px 12px 0 rgb(255 255 255 / 80%), -6px -6px 19px 0 rgb(0 0 0 / 15%);\n`\n\nconst NavBarItem = styled(NavLink)`\n  text-decoration: none;\n  color: rgba(0, 0, 0, 0.9);\n  cursor: pointer;\n  padding: 1.2rem 1.6rem;\n  font-weight: 700;\n  margin: 0.4rem;\n  border-radius: 12px;\n  box-shadow: -6px -6px 12px 0 rgb(255 255 255 / 60%), 6px 6px 12px 0 rgb(0 0 0 / 7%);\n`\n\nconst RedButton = styled.div`\n  color: rgb(255 255 255 / 88%);\n  background-color: rgb(255 0 0);\n  line-height: 2.3rem;\n  width: 2.3rem;\n  text-align: center;\n  height: 2.3rem;\n  cursor: pointer;\n  font-weight: 700;\n  margin: 1rem;\n  border-radius: 12px;\n  box-shadow: -7px -7px 20px 0 rgb(0 0 0 / 36%) inset, 7px 7px 24px 0 rgb(255 104 76 / 87%) inset,\n    -2px -2px 24px 0 rgb(255 104 76 / 87%);\n\n  &:active {\n    box-shadow: 7px 7px 20px 0 rgb(0 0 0 / 36%) inset, -7px -7px 24px 0 rgb(255 104 76 / 87%) inset;\n  }\n`\n\nconst Address = styled.div`\n  width: 10rem;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  font-weight: 600;\n  position: fixed;\n  right: 1rem;\n  top: 1rem;\n`\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { HashRouter } from 'react-router-dom'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}